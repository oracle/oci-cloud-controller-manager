box: iad.ocir.io/spinnaker/oci-kube-ci:1.0.3
no-response-timeout: 30
command-timeout: 30

#============================================
# New cloud-provider-oci build pipeline
#============================================

build:
  base-path: "/go/src/github.com/oracle/oci-cloud-controller-manager"
  steps:
    - script:
      name: check boilerplate
      code: ./hack/verify-boilerplate.sh

    - script:
      name: go fmt
      code: make gofmt

    - script:
      name: golint
      code: |
        make golint

    - script:
      name: go vet
      code: make govet

    - script:
      name: unit tests
      code: make test

    - script:
      name: Build binaries
      code: make build

    - script:
      name: Template manifests
      code: make manifests

    - script:
        name: Write VERSION.txt
        code: |
          echo "$(make version)" > dist/VERSION.txt

publish-docker-image:
  box: alpine
  docker: true
  steps:
    - script:
        name: Set ENV vars
        code: |
          export IMAGE="iad.ocir.io/oracle/cloud-provider-oci"
          export VERSION=$(cat dist/VERSION.txt)
          echo "${VERSION}"

    - script:
        name: Install docker
        code: apk --no-cache add docker

    - script:
        name: Docker login
        code: docker login iad.ocir.io -u $OCIRUSERNAME -p "$OCIRPASSWORD"

    - script:
        name: Build cloud-provider-oci Dockerfile
        code: docker build -t ${IMAGE}:${VERSION} .

    - script:
        name: Push image
        code: |
          docker push ${IMAGE}:${VERSION}
          if [ "${WERCKER_GIT_BRANCH}" = "master" ]; then
            docker tag ${IMAGE}:${VERSION} ${IMAGE}:latest
            docker push ${IMAGE}:latest
          fi

ccm-e2e-test:
  base-path: "/go/src/github.com/oracle/oci-cloud-controller-manager"
  steps:
    - script:
      name: Run CCM E2E tests
      code: |
        export VERSION=$(make version)
        echo "Running CCM tests version: ${VERSION}"
        export NODEPORT_TEST="true"
        export CCM_SECLIST_ID="ocid1.securitylist.oc1.iad.aaaaaaaagekgnvc75yxb66xj2qgocejhyk5xuhojm6wimmteqa5fj43kk5lq"
        export K8S_SECLIST_ID="ocid1.securitylist.oc1.iad.aaaaaaaajzgrgfma2xzzdv4erczaiphuyaflazbt2bvzw2cwj2pxo3fygo5a"

        if [ -z "${KUBECONFIG}" ]; then
            if [ -z "${KUBECONFIG_VAR}" ]; then
                echo "KUBECONFIG or KUBECONFIG_VAR must be set"
                exit 1
            else
                # NB: Wercker environment variables are base64 encoded.
                echo "$KUBECONFIG_VAR" | openssl enc -base64 -d -A > /tmp/kubeconfig
                export KUBECONFIG=/tmp/kubeconfig
            fi
        fi

        if [ -z "${CLOUDCONFIG}" ]; then
            if [ -z "${CLOUDCONFIG_VAR}" ]; then
                echo "CLOUDCONFIG or CLOUDCONFIG_VAR must be set"
                exit 1
            else
                # NB: Wercker environment variables are base64 encoded.
                echo "$CLOUDCONFIG_VAR" | openssl enc -base64 -d -A > /tmp/cloudconfig
                export CLOUDCONFIG=/tmp/cloudconfig
            fi
        fi

        ginkgo                                 \
          -v                                   \
          -progress                            \
          test/e2e/cloud-controller-manager -- \
          --kubeconfig=${KUBECONFIG}           \
          --cloud-config=${CLOUDCONFIG}        \
          --delete-namespace=true

volume-provisioner-e2e-test:
  base-path: "/go/src/github.com/oracle/oci-cloud-controller-manager"
  steps:
    - script:
      name: Run volume provisioner E2E tests
      code: |
        export VERSION=$(cat dist/VERSION.txt)

        export OCI_CONFIG="/tmp/ociconfig"
        echo -n "${OCI_CONFIG_VAR}" | openssl enc -base64 -d -A > "${OCI_CONFIG}"

        export KUBECONFIG="/tmp/kubeconfig"
        echo -n "${KUBECONFIG_VAR}" | openssl enc -base64 -d -A > "${KUBECONFIG}"

        export MOUNT_TARGET_ID="ocid1.mounttarget.oc1.iad.aaaaaby27vezbb5cnfqwillqojxwiotjmfsc2ylefuzqaaaa"

        ginkgo \
          -v \
          test/e2e/volume-provisioner -- \
          --kubeconfig="${KUBECONFIG}" \
          --ociconfig="${OCI_CONFIG}" \
          --mnt-target-id="${MOUNT_TARGET_ID}" \
          --delete-namespace-on-failure=true \
          --image="iad.ocir.io/oracle/cloud-provider-oci:${VERSION}"

release:
  box:
    id: oraclelinux:7-slim
  steps:

    - script:
        name: set ENV vars
        code: |
          export VERSION=$(cat dist/VERSION.txt)
          echo "${VERSION}"

    - script:
        name: Ensure version is unique
        code: |
          if curl -s https://api.github.com/repos/oracle/oci-cloud-controller-manager/git/refs/tags | grep "tags/$VERSION"; then
            echo "Tag $VERSION already exists. Doing nothing."
            exit 1
          fi

    - github-create-release:
      token: $GITHUB_TOKEN
      tag: $VERSION
      title: $VERSION
      draft: false

    - github-upload-asset:
      token: $GITHUB_TOKEN
      file: ./oci-cloud-controller-manager.yaml
      filename: oci-cloud-controller-manager.yaml
      content-type: text/yaml

    - github-upload-asset:
      token: $GITHUB_TOKEN
      file: ./oci-cloud-controller-manager-rbac.yaml
      filename: oci-cloud-controller-manager-rbac.yaml
      content-type: text/yaml
